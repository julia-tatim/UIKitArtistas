import UIKitclass DetailViewController: UIViewController {        private let obra: ObraDeArte        private let scrollView: UIScrollView = {        let sv = UIScrollView()        sv.showsVerticalScrollIndicator = false        return sv    }()        private let contentView = UIView()        private let imageView: UIImageView = {        let iv = UIImageView()        iv.contentMode = .scaleAspectFit        iv.clipsToBounds = true        iv.layer.cornerRadius = 12        return iv    }()        private let tituloLabel: UILabel = {        let label = UILabel()        label.font = UIFont.systemFont(ofSize: 24, weight: .bold)        label.numberOfLines = 0        label.textAlignment = .center        return label    }()        private let artistaLabel: UILabel = {        let label = UILabel()        label.font = UIFont.systemFont(ofSize: 18, weight: .medium)        label.textColor = .secondaryLabel        label.textAlignment = .center        return label    }()        private let infoStack: UIStackView = {        let stack = UIStackView()        stack.axis = .vertical        stack.spacing = 16        stack.distribution = .fill        stack.alignment = .leading        return stack    }()        init(obra: ObraDeArte) {        self.obra = obra        super.init(nibName: nil, bundle: nil)    }        required init?(coder: NSCoder) {        fatalError("init(coder:) has not been implemented")    }        override func viewDidLoad() {        super.viewDidLoad()        view.backgroundColor = .systemBackground        setupViews()        configureData()        setupShareButton()    }        private func setupViews() {        view.addSubview(scrollView)        scrollView.addSubview(contentView)                scrollView.translatesAutoresizingMaskIntoConstraints = false        contentView.translatesAutoresizingMaskIntoConstraints = false                NSLayoutConstraint.activate([            scrollView.topAnchor.constraint(equalTo: view.safeAreaLayoutGuide.topAnchor),            scrollView.leadingAnchor.constraint(equalTo: view.leadingAnchor),            scrollView.trailingAnchor.constraint(equalTo: view.trailingAnchor),            scrollView.bottomAnchor.constraint(equalTo: view.bottomAnchor),                        contentView.topAnchor.constraint(equalTo: scrollView.topAnchor),            contentView.leadingAnchor.constraint(equalTo: scrollView.leadingAnchor),            contentView.trailingAnchor.constraint(equalTo: scrollView.trailingAnchor),            contentView.bottomAnchor.constraint(equalTo: scrollView.bottomAnchor),            contentView.widthAnchor.constraint(equalTo: scrollView.widthAnchor)        ])                contentView.addSubview(imageView)        contentView.addSubview(tituloLabel)        contentView.addSubview(artistaLabel)        contentView.addSubview(infoStack)                imageView.translatesAutoresizingMaskIntoConstraints = false        tituloLabel.translatesAutoresizingMaskIntoConstraints = false        artistaLabel.translatesAutoresizingMaskIntoConstraints = false        infoStack.translatesAutoresizingMaskIntoConstraints = false                NSLayoutConstraint.activate([            imageView.topAnchor.constraint(equalTo: contentView.topAnchor, constant: 20),            imageView.leadingAnchor.constraint(equalTo: contentView.leadingAnchor, constant: 20),            imageView.trailingAnchor.constraint(equalTo: contentView.trailingAnchor, constant: -20),            imageView.heightAnchor.constraint(equalTo: view.widthAnchor, multiplier: 0.8),                        tituloLabel.topAnchor.constraint(equalTo: imageView.bottomAnchor, constant: 24),            tituloLabel.leadingAnchor.constraint(equalTo: contentView.leadingAnchor, constant: 20),            tituloLabel.trailingAnchor.constraint(equalTo: contentView.trailingAnchor, constant: -20),                        artistaLabel.topAnchor.constraint(equalTo: tituloLabel.bottomAnchor, constant: 8),            artistaLabel.leadingAnchor.constraint(equalTo: contentView.leadingAnchor, constant: 20),            artistaLabel.trailingAnchor.constraint(equalTo: contentView.trailingAnchor, constant: -20),                        infoStack.topAnchor.constraint(equalTo: artistaLabel.bottomAnchor, constant: 24),            infoStack.leadingAnchor.constraint(equalTo: contentView.leadingAnchor, constant: 20),            infoStack.trailingAnchor.constraint(equalTo: contentView.trailingAnchor, constant: -20),            infoStack.bottomAnchor.constraint(equalTo: contentView.bottomAnchor, constant: -20)        ])                // Adiciona informações à stack        addInfoRow(title: "Ano de criação:", value: "\(obra.ano)")        addInfoRow(title: "Estilo artístico:", value: obra.estilo)                let separator = UIView()        separator.backgroundColor = .separator        separator.heightAnchor.constraint(equalToConstant: 1).isActive = true        infoStack.addArrangedSubview(separator)                let descTitle = UILabel()        descTitle.text = "Sobre a obra:"        descTitle.font = UIFont.systemFont(ofSize: 18, weight: .semibold)        infoStack.addArrangedSubview(descTitle)                let descLabel = UILabel()        descLabel.text = obra.descricao        descLabel.numberOfLines = 0        descLabel.font = UIFont.systemFont(ofSize: 16)        infoStack.addArrangedSubview(descLabel)    }        private func addInfoRow(title: String, value: String) {        let stack = UIStackView()        stack.axis = .horizontal        stack.spacing = 8        stack.alignment = .firstBaseline                let titleLabel = UILabel()        titleLabel.text = title        titleLabel.font = UIFont.systemFont(ofSize: 16, weight: .medium)        titleLabel.setContentHuggingPriority(.required, for: .horizontal)                let valueLabel = UILabel()        valueLabel.text = value        valueLabel.font = UIFont.systemFont(ofSize: 16)        valueLabel.numberOfLines = 0                stack.addArrangedSubview(titleLabel)        stack.addArrangedSubview(valueLabel)        infoStack.addArrangedSubview(stack)    }        private func configureData() {        imageView.image = UIImage(named: obra.imagemNome)        tituloLabel.text = obra.titulo        artistaLabel.text = obra.artista    }        private func setupShareButton() {        navigationItem.rightBarButtonItem = UIBarButtonItem(            barButtonSystemItem: .action,            target: self,            action: #selector(shareTapped)        )    }        @objc private func shareTapped() {        let shareText = """        Confira esta obra de arte curitibana:                \(obra.titulo)        por \(obra.artista)                \(obra.descricao)                #ArtistasCuritibanos #CulturaParanaense        """                let activityVC = UIActivityViewController(            activityItems: [shareText, imageView.image ?? UIImage()],            applicationActivities: nil        )                // Configuração para iPad        activityVC.popoverPresentationController?.barButtonItem = navigationItem.rightBarButtonItem                present(activityVC, animated: true)    }}